
# coding: utf-8

# # Generate the ambiguous consensus sequence of an alligned fasta file
# 
# **Input:** alligned file generated by clustaw
# **Output:** Ambiguous consensus sequence of the allignment file, with IUPAC code.
# 
# **Basic Idea:**
# * Use a two dimension matrix to store the data, the column of the matrix is the sequence length, 
#  while the row of the martrix is ATGC and others (including gaps and other characters stored in O)
# * Degap: if a gap got a frequency larger than 90%(1-de_gap_cut_off), or smaller than 10%(de_gap_cut_off) the column will be removed from the sequence.
# * Caculate the frequency of character in each positon, the consensus character of the positon 
#  will be represented by the character which got a frequency larger than 98%(gaps and other character 
#  will be excluded from this calculation).
# modification: if the input fasta sequence have ambigous code, decode that ambigous code and add to consensus sequece - needs to be done
# In[1]:

import string
import numpy as np
import sys

de_gap_cut_off = 0.10  #define the de gap cut off value
ambiguous_cut_off = 0.04 #define the cut off value


ATGC = {'A','T','G','C'}
IUPAC_DICT = {'R':{'A','G'}, 'Y':{'C','T'},'S':{'G','C'},'W':{'A','T'},
              'K':{'G','T'},'M':{'A','C'},'B':{'C','G','T'},'D':{'A','G','T'},
              'H':{"A","C","T"},'V':{"A","C","G"},'N':{"A","T","C","G"},
             "X":{"A","T","G","C"}}
IUPAC_DICT_REV = { 'AG':'R', 'TC':'Y','GC':'S','AT':'W','TG':'K','AC':'M',
                  'TGC':'B','ATG':'D','ATC':'H','AGC':'V','ATGC':'N','A':'A',
                  'T':'T','G':'G','C':'C','X':'X'}


# In[7]:

#example : input_file = 'human adenovirus hexon complete cds 2700_3000 292 alligned.fasta'
# input_file = input("Enter the file name :")
input_file = sys.argv[1]
output_file = input_file.split('.')[0]+'_consensus_seq.fasta'


# In[3]:

len_list = []
with open (input_file) as fhand_input:
    seq_number = 0
    seq = ''
    for line in fhand_input: 
        line = line.strip()
        if line.startswith('>'):
            len_seq = len(seq)
            if len_seq >0:
                len_list.append(len_seq)
                #The seq content can also be recorded here
            seq_number+=1    
            seq = ''
        else:
            seq +=line
len_set = set(len_list)
if len(len_set) >1:
    print('Not all sequences got equal lenghth in the file')
else:
    len_seq = list(len_set)[0]
    print('All %d sequencs are equal with the length of %s'%(seq_number,len_seq))


# In[4]:

character_array = np.zeros((5,len_seq))
with open (input_file) as fhand_input:
    seq_number = 0
    seq = ''
    for line in fhand_input: 
        line = line.strip()
        if line.startswith('>'):
            #seq_name = line
            seq_number+=1    
            seq = ''
        else:
            seq +=line
            if len(seq) == len_seq:
                full_seq = str.upper(seq)
                for index, letter in enumerate(full_seq):
                    if letter == 'A':
                        character_array[0,index]+=1
                    elif letter == 'T':
                        character_array[1,index]+=1
                    elif letter == 'G':
                        character_array[2,index]+=1
                    elif letter == 'C':
                        character_array[3,index]+=1
                    else:
                        character_array[4,index]+=1


# In[5]:

frequency_array = character_array[:,:]/seq_number
consensus_list = [0]*len_seq
consensus_list_with_gaps = [0]*len_seq
consensus_list_all_gaps = [0]*len_seq


for  j in range(len_seq):
    frequency_without_gap = 1 - frequency_array[4,j]
    ambiguous_cut_off_without_gap = ambiguous_cut_off*frequency_without_gap
    if frequency_array[4,j] < de_gap_cut_off: #gap frequency less than cut off value
        ambiguous_letter = ''
        for i in range(4):
            if frequency_array[i,j] >= ambiguous_cut_off_without_gap:
                ambiguous_letter+='ATGC'[i]
                consensus_list[j] = IUPAC_DICT_REV[ambiguous_letter]
                consensus_list_with_gaps[j] = IUPAC_DICT_REV[ambiguous_letter]
                if frequency_array[4,j]>0:
                    consensus_list_all_gaps[j] = '-'
                else:
                    consensus_list_all_gaps[j] = IUPAC_DICT_REV[ambiguous_letter]
    elif frequency_array[4,j] > 1 - de_gap_cut_off: #gap frequency larger than cut off value
        consensus_list[j] = '' 
        consensus_list_with_gaps[j] = ''
        consensus_list_all_gaps[j] = '-'
    else:
        consensus_list[j] = '' #stands for gap
        consensus_list_with_gaps[j] = '-'
        consensus_list_all_gaps[j] = '-'



ambiguous_consensus_seq = ''.join(consensus_list)
ambiguous_consensus_seq_with_gaps = ''.join(consensus_list_with_gaps)
ambiguous_consensus_seq_all_gaps = ''.join(consensus_list_all_gaps)

# In[6]:

def ambiguous_frequency(seq):
    seq = str.upper(seq)
    atgc_number = 0
    for letter in seq:
        if letter in ATGC:
            atgc_number+=1
    frequency = 1 - atgc_number/len(seq)
    return frequency
        
consensus_seq_ambiguous_frequency = ambiguous_frequency(ambiguous_consensus_seq)

with open(output_file, 'w') as fhand:
    fhand.write ('Ambiguous consensus sequences from %d sequences have been wirtten to the file, the length is %d.\n'%(seq_number,len_seq))
    fhand.write('The de gap cut off rate is %.2f and %.2f, the ambiguous cut off rate is %.3f.\n'%(de_gap_cut_off, 1-de_gap_cut_off,ambiguous_cut_off))
    fhand.write("The ambigous frequency is %.2f\n"%consensus_seq_ambiguous_frequency)
    fhand.write('>%s\n' %output_file.split('.')[0])
    fhand.write(ambiguous_consensus_seq+'\n')
    fhand.write('>%s with gaps\n' %output_file.split('.')[0])
    fhand.write(ambiguous_consensus_seq_with_gaps+'\n')
    fhand.write('>%s all gaps\n' %output_file.split('.')[0])
    fhand.write(ambiguous_consensus_seq_all_gaps)